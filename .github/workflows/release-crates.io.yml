name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  # Build and test before releasing
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install GDAL
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin libgdal-dev

      - name: Run tests
        run: cargo test --all-features

  # Release to crates.io
  publish-rust:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install GDAL
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin libgdal-dev

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Build Python wheels for multiple platforms
  # build-wheels:
  #   needs: test
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, windows-latest, macos-latest]
  #       python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@stable

  #     - name: Install GDAL (Ubuntu)
  #       if: matrix.os == 'ubuntu-latest'
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y gdal-bin libgdal-dev

  #     - name: Install GDAL (macOS)
  #       if: matrix.os == 'macos-latest'
  #       run: |
  #         brew install gdal

  #     - name: Install GDAL (Windows)
  #       if: matrix.os == 'windows-latest'
  #       run: |
  #         choco install gdal

  #     - name: Install maturin
  #       run: pip install maturin

  #     - name: Build wheels
  #       run: maturin build --release --out dist --find-interpreter

  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  # # Publish to PyPI
  # publish-python:
  #   needs: build-wheels
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  #     - name: Publish to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         password: ${{ secrets.PYPI_API_TOKEN }}

  # Create GitHub Release
  create-release:
    # needs: [publish-rust, publish-python]
    needs: [publish-rust]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/release/japan-dem
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
